kind: pipeline
type: docker
name: CI_ALICA_API_SPRINGBOOT

variables:
  MAVEN_CLI_OPTS: '--batch-mode --errors --fail-at-end --show-version -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository'

trigger:
  event:
    - push

steps:
#  - name: build-and-test
#    image: maven:3.8.3
#    commands:
#      - mvn $MAVEN_CLI_OPTS clean compile test

#  - name: deploy-container-alica-api
#    image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-dockerproxy-clientdrone:latest
#    environment:
#      IMAGENAME: maven:3.8.3
#      CONTAINERNAME: maven
#      COMMAND: create
#      OVERWRITE: true
#      CODEFIRST_CLIENTDRONE_ENV_PMA_HOST: SAE_ALICA-API
#      CODEFIRST_CLIENTDRONE_ENV_PMA_ABSOLUTE_URI: https://codefirst.iut.uca.fr/containers/sae_alica-api/
#      ADMINS: baptistedudonne

#    commands:
#      - mvn $MAVEN_CLI_OPTS compile   # Compilation
#      - mvn $MAVEN_CLI_OPTS package   # Création du package JAR exécutable
#      - mvn $MAVEN_CLI_OPTS install   # Installation du JAR dans le dépôt local Maven (optionnel)
#      - mvn $MAVEN_CLI_OPTS spring-boot:run   # Lancement de l'application Spring Boot

#    depends_on: [ build-and-test ]

  - name: code-inspection
    image: maven
    secrets: [ API_SPRINGBOOT_SECRET ]
    environment:
      sonar_host: https://codefirst.iut.uca.fr/sonar/
      sonar_token:
        from_secret: API_SPRINGBOOT_SECRET
      project_key: ALICA_TEST
    commands:
#     # - mvn clean verify sonar:sonar -Dsonar.login=${sonar_token}
       - mvn clean verify sonar:sonar -Dsonar.login=${sonar_token}

#  - name: generate-and-deploy-docs
#    image: hub.codefirst.iut.uca.fr/thomas.bellembois/codefirst-docdeployer
#    failure: ignore
#    volumes:
#      - name: docs
#        path: /docs
#    commands:
#      - /entrypoint.sh

#  test
#  mvn clean verify sonar:sonar -Dsonar.projectKey=API_SPRINGBOOT_SECRET -Dsonar.projectName='API_SPRINGBOOT' -Dsonar.host.url=https://codefirst.iut.uca.fr/sonar/ -Dsonar.token=ALICA_API_SPRINGBOOT -Dsonar.login=ALICA_API_SPRINGBOOT
